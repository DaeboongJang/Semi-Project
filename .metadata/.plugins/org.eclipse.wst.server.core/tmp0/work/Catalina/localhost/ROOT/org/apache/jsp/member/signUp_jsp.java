/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.72
 * Generated at: 2021-12-21 08:13:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class signUp_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("	<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\r\n");
      out.write("		integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\r\n");
      out.write("	<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"\r\n");
      out.write("		integrity=\"sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p\"\r\n");
      out.write("		crossorigin=\"anonymous\"></script>\r\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-3.6.0.js\" integrity=\"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("	    <title>회원가입</title>\r\n");
      out.write("    <style>\r\n");
      out.write("     body{\r\n");
      out.write("  background-color:rgb(86, 86, 196);\r\n");
      out.write("  }\r\n");
      out.write("        h1 {\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        p {\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            font-size: small;\r\n");
      out.write("            color: gray;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        input::placeholder {\r\n");
      out.write("            font-size: smaller;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #daum-postcode input {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #btnCancel {\r\n");
      out.write("            text-align: right;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .container {\r\n");
      out.write("            max-width: 680px;\r\n");
      out.write("            margin-top: 80px;\r\n");
      out.write("            padding: 32px;\r\n");
      out.write("            background: #fff;\r\n");
      out.write("            -webkit-border-radius: 10px;\r\n");
      out.write("            -moz-border-radius: 10px;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            -webkit-box-shadow: 0 8px 20px 0 rgba(0, 0, 0, 0.15);\r\n");
      out.write("            -moz-box-shadow: 0 8px 20px 0 rgba(0, 0, 0, 0.15);\r\n");
      out.write("            box-shadow: 0 8px 20px 0 rgba(0, 0, 0, 0.15)\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .profileImg-Wrapper>div {\r\n");
      out.write("            float: left;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .profileImg-Wrapper>div:nth-child(2) {\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .profileImg-Wrapper span {\r\n");
      out.write("            font-size: small;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #profileImg {\r\n");
      out.write("            width: 100px;\r\n");
      out.write("            height: 100px;\r\n");
      out.write("            border: 1px solid lightgray;\r\n");
      out.write("            border-radius: 50%;\r\n");
      out.write("            background-image: url(\"/resources/imgTmp/squid-game-6723533_960_720.webp\");\r\n");
      out.write("            background-size: 100%;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #btnUploadFake {\r\n");
      out.write("            margin: 5px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #btnUpload {\r\n");
      out.write("            display: none;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #hiddenInput,\r\n");
      out.write("        #hiddenInput2,\r\n");
      out.write("        #email_verification {\r\n");
      out.write("            display: none;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .clsBtn {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            background-color:rgb(86, 86, 196);\r\n");
      out.write("            border:1px solid rgb(86, 86, 196);\r\n");
      out.write("        }\r\n");
      out.write("        .clsBtn:hover{\r\n");
      out.write("        	background-color:#b4b4e4;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("		.btnPost{\r\n");
      out.write("			background-color:rgb(86, 86, 196);\r\n");
      out.write("			border:1px solid rgb(86, 86, 196);\r\n");
      out.write("		}\r\n");
      out.write("		.btnPost:hover{\r\n");
      out.write("			background-color:#b4b4e4;\r\n");
      out.write("		}\r\n");
      out.write("        .txtRegex {\r\n");
      out.write("            font-size: smaller;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <form action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/signupProc.mem\" method=\"post\" id=\"signupForm\"\r\n");
      out.write("        enctype=\"multipart/form-data\">\r\n");
      out.write("        <div class=\"container\">\r\n");
      out.write("            <div class=\"row my-4\">\r\n");
      out.write("                <div class=\"col p-3 d-flex justify-content-center\">\r\n");
      out.write("                    <h1>회원가입</h1>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <!--프로필 영역-->\r\n");
      out.write("            <div class=\"row my-4\">\r\n");
      out.write("                <div class=\"col d-flex justify-content-center\">\r\n");
      out.write("                    <div id=\"profileImg\"></div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <input type=\"file\" name=\"file\" accept=\"image/*\" id=\"btnUpload\">\r\n");
      out.write("\r\n");
      out.write("            <!--아이디 영역-->\r\n");
      out.write("            <div class=\"row my-4\">\r\n");
      out.write("                <div class=\"col-md-9 mb-3\">\r\n");
      out.write("                    <label for=\"id\">아이디</label>\r\n");
      out.write("                    <input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" placeholder=\"6~9자 이내의 영문자, 숫자\" maxlength=\"9\" required>\r\n");
      out.write("                    <span class=\"txtRegex\" id=\"txtRegex_id\"></span>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col-md-3 mb-3\">\r\n");
      out.write("                    <label for=\"name\">&nbsp;</label>\r\n");
      out.write("                    <button class=\"btn btn-primary clsBtn\" type=\"button\" id=\"idCheck\">중복 검사</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <!--패스워드 영역-->\r\n");
      out.write("            <div class=\"row my-4\">\r\n");
      out.write("                <div class=\"col-md-6 mb-3\">\r\n");
      out.write("                    <label for=\"password1\">비밀번호 (8~16자 이내)</label>\r\n");
      out.write("                    <input type=\"password\" class=\"form-control\" id=\"password1\" name=\"password1\" maxlength=\"16\"\r\n");
      out.write("                        placeholder=\"대소문자, 숫자, 특수문자 각 1개 이상\" required>\r\n");
      out.write("                    <div class=\"invalid-feedback\">\r\n");
      out.write("                        패스워드를 입력해주세요.\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <span class=\"txtRegex\" id=\"txtRegex_pw\"></span>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col-md-6 mb-3\">\r\n");
      out.write("                    <label for=\"password2\">비밀번호 확인</label>\r\n");
      out.write("                    <input type=\"password\" class=\"form-control\" id=\"password2\" name=\"password2\" maxlength=\"16\"\r\n");
      out.write("                        placeholder=\"대소문자, 숫자, 특수문자 각 1개 이상\" required>\r\n");
      out.write("                    <div class=\"invalid-feedback\">\r\n");
      out.write("                        패스워드를 입력해주세요.\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <!--닉네임 영역-->\r\n");
      out.write("            <div class=\"row my-4\">\r\n");
      out.write("                <div class=\"col-md-9 mb-3\">\r\n");
      out.write("                    <label for=\"nickname\">닉네임</label>\r\n");
      out.write("                    <input type=\"text\" class=\"form-control\" id=\"nickname\" name=\"nickname\" maxlength=\"10\"\r\n");
      out.write("                        placeholder=\"한글, 영문자 2~10자 이내\" required>\r\n");
      out.write("                    <span class=\"txtRegex\" id=\"txtRegex_nickname\"></span>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col-md-3 mb-3\">\r\n");
      out.write("                    <label for=\"name\">&nbsp;</label>\r\n");
      out.write("                    <button class=\"btn btn-primary clsBtn\" type=\"button\" id=\"nicknameCheck\">중복 검사</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <!--이메일 영역-->\r\n");
      out.write("            <div class=\"row my-4\">\r\n");
      out.write("                <div class=\"col-md-9 mb-3\">\r\n");
      out.write("                    <label for=\"email\">이메일</label>\r\n");
      out.write("                    <input type=\"text\" class=\"form-control\" id=\"email\" name=\"email\" maxlength=\"35\" placeholder=\"이메일 입력\"\r\n");
      out.write("                        required>\r\n");
      out.write("                    <div class=\"invalid-feedback\">\r\n");
      out.write("                        이메일을 입력해주세요.\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <span class=\"txtRegex\" id=\"txtRegex_email\"></span>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col-md-3 mb-3\">\r\n");
      out.write("                    <label for=\"emailCheck\">&nbsp;</label>\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-primary clsBtn\" id=\"emailCheck\">중복 검사</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <!--숨은 인증창-->\r\n");
      out.write("            <div class=\"row\" id=\"hiddenInput2\">\r\n");
      out.write("                <div class=\"col-md-9 mb-3\">\r\n");
      out.write("                    <input type=\"text\" class=\"form-control\" id=\"verification_input2\" placeholder=\"인증번호 입력\" required>\r\n");
      out.write("                    <div class=\"invalid-feedback\">\r\n");
      out.write("                        이메일을 입력해주세요.\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col-md-3 mb-3\">\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-primary clsBtn\" id=\"verification_submit2\">인증번호 확인</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <!--휴대전화 영역-->\r\n");
      out.write("            <div class=\"row my-4\">\r\n");
      out.write("                <div class=\"col-md-3 mb-3\">\r\n");
      out.write("                    <label for=\"phone1\">휴대전화</label>\r\n");
      out.write("                    <select class=\"form-select\" aria-label=\"Default select example\" id=\"phone1\" name=\"phone1\" required>\r\n");
      out.write("                        <option selected>010</option>\r\n");
      out.write("                        <option value=\"1\">011</option>\r\n");
      out.write("                        <option value=\"2\">016</option>\r\n");
      out.write("                        <option value=\"2\">017</option>\r\n");
      out.write("                        <option value=\"3\">018</option>\r\n");
      out.write("                    </select>\r\n");
      out.write("                    <span class=\"txtRegex\" id=\"txtRegex_phone\"></span>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col-md-3 mb-3\">\r\n");
      out.write("                    <label for=\"phone2\">&nbsp;</label>\r\n");
      out.write("                    <input type=\"text\" class=\"form-control\" id=\"phone2\" name=\"phone2\" maxlength=\"4\">\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col-md-3 mb-3\">\r\n");
      out.write("                    <label for=\"phone3\">&nbsp;</label>\r\n");
      out.write("                    <input type=\"text\" class=\"form-control\" id=\"phone3\" name=\"phone3\" maxlength=\"4\">\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col-md-3 mb-3\">\r\n");
      out.write("                    <label for=\"phone_verification\">&nbsp;</label>\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-primary clsBtn\" id=\"phone_verification\">인증번호 발송</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <!--숨은 인증창-->\r\n");
      out.write("            <div class=\"row my-4\" id=\"hiddenInput\">\r\n");
      out.write("                <div class=\"col-md-6 mb-3\">\r\n");
      out.write("                    <input type=\"text\" class=\"form-control\" id=\"verification_input\" maxlength=\"4\" placeholder=\"인증번호 입력\"\r\n");
      out.write("                        required>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col-md-6 mb-3\">\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-primary clsBtn\" id=\"verification_submit\">인증번호 확인</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <!--휴대전화번호 병합하여 저장할 곳-->\r\n");
      out.write("            <div class=\"d-none\">\r\n");
      out.write("                <input type=\"text\" id=\"user_phone\" name=\"user_phone\">\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <!--주소 영역-->\r\n");
      out.write("            <div class=\"row my-4\" id=\"daum-postcode\">\r\n");
      out.write("                <div class=\"col-12 col-md-6 my-2\">\r\n");
      out.write("                    <input type=\"text\" class=\"form-control\" id=\"sample4_postcode\" name=\"postcode\" placeholder=\"우편번호\"\r\n");
      out.write("                        readonly>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col-12 col-md-6 my-2\">\r\n");
      out.write("                    <div id=\"wrap-findPostcode\"><input type=\"button\" onclick=\"sample4_execDaumPostcode()\"\r\n");
      out.write("                            value=\"우편번호 찾기\" class=\"btn btn-primary btnPost\"></div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col-12 col-md-6 my-2\"><input type=\"text\" class=\"form-control\" id=\"sample4_roadAddress\"\r\n");
      out.write("                        name=\"roadAddress\" placeholder=\"도로명주소\" readonly></div>\r\n");
      out.write("                <div class=\"col-12 col-md-6 my-2\"><input type=\"text\" class=\"form-control\" id=\"sample4_jibunAddress\"\r\n");
      out.write("                        placeholder=\"지번주소\" readonly></div>\r\n");
      out.write("                <div class=\"col-12 col-md-6 my-2\"><input type=\"text\" class=\"form-control\" id=\"sample4_detailAddress\"\r\n");
      out.write("                        name=\"detailAddress\" placeholder=\"상세주소\"></div>\r\n");
      out.write("                <div class=\"col-12 col-md-6 my-2\"><input type=\"text\" class=\"form-control\" id=\"sample4_extraAddress\"\r\n");
      out.write("                        name=\"extraAddress\" placeholder=\"참고항목\" readonly></div>\r\n");
      out.write("                <!--주소 병합하여 저장할 곳-->\r\n");
      out.write("                <div class=\"col-12 d-none\">\r\n");
      out.write("                    <input type=\"text\" id=\"user_address\" name=\"user_address\">\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <!--경계선 + 동의 버튼-->\r\n");
      out.write("            <hr class=\"mb-4\">\r\n");
      out.write("            <div class=\"custom-control custom-checkbox\">\r\n");
      out.write("                <input type=\"checkbox\" class=\"custom-control-input\" id=\"aggrement\">\r\n");
      out.write("                <label class=\"custom-control-label\" for=\"aggrement\">개인정보 수집 및 이용에 동의합니다.</label>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <!--버튼 영역-->\r\n");
      out.write("            <div class=\"row my-4\">\r\n");
      out.write("                <div class=\"col\">\r\n");
      out.write("                    <button class=\"btn btn-primary btn-lg clsBtn\" type=\"button\" id=\"btnSubmit\">가입 완료</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <!--프로필 이미지 경로 담을 곳-->\r\n");
      out.write("            <input type=\"text\" id=\"input_profileImgUrl\" name=\"input_profileImgUrl\" hidden>\r\n");
      out.write("        </div>\r\n");
      out.write("    </form>\r\n");
      out.write("    <!--footer-->\r\n");
      out.write("    <footer class=\"my-3 text-center text-small\">\r\n");
      out.write("        <p class=\"mb-1\">&copy; 2021 PhotoFolio</p>\r\n");
      out.write("    </footer>\r\n");
      out.write("\r\n");
      out.write("    <script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        /***** 아이디 영역 *****/\r\n");
      out.write("\r\n");
      out.write("        // 변수 - 아이디 관련\r\n");
      out.write("        let id = document.getElementById(\"id\"); // 아이디 입력창\r\n");
      out.write("        let idCheck = document.getElementById(\"idCheck\"); // 중복검사 버튼\r\n");
      out.write("        let txtRegex_id = document.getElementById(\"txtRegex_id\"); // 정규식 경고문구\r\n");
      out.write("\r\n");
      out.write("        // 아이디 정규식(통과하면 true, 아니면 false 반환)\r\n");
      out.write("        function regexId() {\r\n");
      out.write("            const regexId = /^[a-zA-Z0-9_]{6,9}$/;\r\n");
      out.write("            return regexId.test(id.value);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 아이디 입력창 벗어날 때 정규식 검사(중복검사 버튼과 겹침)\r\n");
      out.write("        id.addEventListener(\"change\", function () {\r\n");
      out.write("            if (!regexId()) {\r\n");
      out.write("                txtRegex_id.innerText = \"아이디를 올바르게 입력해주세요.\";\r\n");
      out.write("                txtRegex_id.style.color = \"red\";\r\n");
      out.write("            } else {\r\n");
      out.write("                txtRegex_id.innerText = \"\";\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 아이디 중복검사 클릭\r\n");
      out.write("        idCheck.addEventListener(\"click\", function () {\r\n");
      out.write("            if (regexId()) { // 정규식 통과해야 중복검사 가능\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    type: \"post\",\r\n");
      out.write("                    url: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/idCheckProc.mem\",\r\n");
      out.write("                    data: {\r\n");
      out.write("                        \"id\": id.value\r\n");
      out.write("                    }\r\n");
      out.write("                }).done(function (data) { // 중복이 아니면 String형 false반환\r\n");
      out.write("                    if (data == \"false\") { // 중복이 아닐 경우\r\n");
      out.write("                        alert(\"사용 가능한 아이디입니다.\");\r\n");
      out.write("                        id.readOnly = \"true\"; // 입력창 잠그기\r\n");
      out.write("                        idCheck.disabled = \"disabled\"; // 중복검사 버튼 잠그기\r\n");
      out.write("                    } else {\r\n");
      out.write("                        alert(\"이미 존재하는 아이디입니다. 다시 입력해주세요.\");\r\n");
      out.write("                    }\r\n");
      out.write("                }).fail(function (e) {\r\n");
      out.write("                    console.log(e);\r\n");
      out.write("                });\r\n");
      out.write("            } else { // 정규식 미통과 경우\r\n");
      out.write("                txtRegex_id.innerText = \"아이디를 올바르게 입력해주세요.\";\r\n");
      out.write("                txtRegex_id.style.color = \"red\";\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        /***** 패스워드 영역 *****/\r\n");
      out.write("\r\n");
      out.write("        // 변수 - 패스워드 관련\r\n");
      out.write("        let password1 = document.getElementById(\"password1\"); // pw1 입력창\r\n");
      out.write("        let password2 = document.getElementById(\"password2\"); // pw2 입력창\r\n");
      out.write("\r\n");
      out.write("        // 대소수특 각1개 이상 존재 & 8~16자리의 글자\r\n");
      out.write("        function regexPw() {\r\n");
      out.write("            const regexPw1 = /[a-z]/;\r\n");
      out.write("            const regexPw2 = /[A-Z]/;\r\n");
      out.write("            const regexPw3 = /[0-9]/;\r\n");
      out.write("            const regexPw4 = /[~!@#$%^&*+._]/;\r\n");
      out.write("            const regexPw5 = /[\\S]{8,16}/; \r\n");
      out.write("            const regexPw = [regexPw1, regexPw2, regexPw3, regexPw4];\r\n");
      out.write("            let checkRegex = [false, false, false, false];\r\n");
      out.write("            // 패스워드 글자 하나씩 분리하여 대소수특 존재하는지 검사\r\n");
      out.write("            for (let i = 0; i < password1.value.length; i++) {\r\n");
      out.write("                for (let j = 0; j < regexPw.length; j++) {\r\n");
      out.write("                    if (regexPw[j].test(password1.value.substr(i, 1)) || checkRegex[j] == true) {\r\n");
      out.write("                        checkRegex[j] = true;\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("            if (checkRegex[0] && checkRegex[1] && checkRegex[2] && checkRegex[3] && regexPw5.test(password1.value)) {\r\n");
      out.write("                return true;\r\n");
      out.write("            } else {\r\n");
      out.write("                return false;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 첫번째 패스워드 입력창 벗어날 때 정규식 검사\r\n");
      out.write("        password1.addEventListener(\"change\", function () {\r\n");
      out.write("            if (!regexPw() && password2.value == \"\") {\r\n");
      out.write("                txtRegex_pw.innerText = \"올바른 비밀번호를 입력하세요\";\r\n");
      out.write("                txtRegex_pw.style.color = \"red\";\r\n");
      out.write("            } else if (regexPw() && (password2.value == password1.value)) {\r\n");
      out.write("                txtRegex_pw.innerText = \"\";\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 두번째 패스워드 입력창 벗어날 때 일치하는 지 확인\r\n");
      out.write("        password2.addEventListener(\"change\", function () {\r\n");
      out.write("            if (password2.value == \"\" || (password2.value !== password1.value) || !regexPw()) {\r\n");
      out.write("                txtRegex_pw.innerText = \"올바른 비밀번호를 입력하세요\";\r\n");
      out.write("                txtRegex_pw.style.color = \"red\";\r\n");
      out.write("            } else {\r\n");
      out.write("                txtRegex_pw.innerText = \"\";\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        /***** 닉네임 영역 *****/\r\n");
      out.write("\r\n");
      out.write("        // 변수 - 닉네임 관련\r\n");
      out.write("        let nickname = document.getElementById(\"nickname\"); // nickname 입력창\r\n");
      out.write("        let nicknameCheck = document.getElementById(\"nicknameCheck\"); // nickname 중복검사 버튼\r\n");
      out.write("        let txtRegex_nickname = document.getElementById(\"txtRegex_nickname\");\r\n");
      out.write("        \r\n");
      out.write("        // 닉네임 정규식\r\n");
      out.write("        function regexNickname() {\r\n");
      out.write("            const regexNickname = /^[a-zA-Zㄱ-힣]{2,10}$/; // 2~10자리 대소수한\r\n");
      out.write("            return regexNickname.test(nickname.value);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("     // 닉네임 입력창 검사\r\n");
      out.write("        nickname.addEventListener(\"change\", function () {\r\n");
      out.write("            if (!regexNickname()) {\r\n");
      out.write("                txtRegex_nickname.innerText = \"올바른 닉네임을 입력하세요.\";\r\n");
      out.write("                txtRegex_nickname.style.color = \"red\";\r\n");
      out.write("            } else {\r\n");
      out.write("                txtRegex_nickname.innerText = \"\";\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("     \r\n");
      out.write("        // 닉네임 중복검사\r\n");
      out.write("        nicknameCheck.addEventListener(\"click\", function () {\r\n");
      out.write("            if (regexNickname()) {\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    type: \"post\",\r\n");
      out.write("                    url: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/nicknameCheckProc.mem\",\r\n");
      out.write("                    data: {\r\n");
      out.write("                        \"nickname\": nickname.value\r\n");
      out.write("                    }\r\n");
      out.write("                }).done(function (data) {\r\n");
      out.write("                    if (data == \"false\") {\r\n");
      out.write("                        alert(\"사용 가능한 닉네임입니다.\");\r\n");
      out.write("                        nickname.readOnly = \"true\";\r\n");
      out.write("                        nicknameCheck.disabled = \"disabled\";\r\n");
      out.write("                    } else {\r\n");
      out.write("                        alert(\"이미 존재하는 닉네임입니다. 다시 입력해주세요.\");\r\n");
      out.write("                    }\r\n");
      out.write("                }).fail(function (e) {\r\n");
      out.write("                    console.log(e);\r\n");
      out.write("                });\r\n");
      out.write("            } else {\r\n");
      out.write("                txtRegex_nickname.innerText = \"올바른 닉네임을 입력하세요.\";\r\n");
      out.write("                txtRegex_nickname.style.color = \"red\";\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        /***** 이메일 영역 *****/\r\n");
      out.write("\r\n");
      out.write("        // 변수 - 이메일 관련\r\n");
      out.write("        let email = document.getElementById(\"email\"); // 이메일 입력창\r\n");
      out.write("        let emailCheck = document.getElementById(\"emailCheck\") // 중복 검사 버튼\r\n");
      out.write("        let verification_input2 = document.getElementById(\"verification_input2\"); // 인증번호 입력창\r\n");
      out.write("        let verification_submit2 = document.getElementById(\"verification_submit2\"); // 인증번호 확인버튼\r\n");
      out.write("        let verification_number2 = 0; // 인증번호 4자리 수 담을 공간\r\n");
      out.write("\r\n");
      out.write("        // 이메일 정규식(정규식 문구 올바른지 검증 필요)\r\n");
      out.write("        function regexEmail() {\r\n");
      out.write("            const regexEmail = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/;\r\n");
      out.write("            return regexEmail.test(email.value);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 이메일 입력창 벗어날 때 정규식 검사\r\n");
      out.write("        email.addEventListener(\"change\", function () {\r\n");
      out.write("            if (!regexEmail()) {\r\n");
      out.write("                txtRegex_email.innerText = \"이메일을 제대로 입력하세요.\";\r\n");
      out.write("                txtRegex_email.style.color = \"red\";\r\n");
      out.write("            } else {\r\n");
      out.write("                txtRegex_email.innerText = \"\";\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 이메일 중복검사 \r\n");
      out.write("        emailCheck.addEventListener(\"click\", function () {\r\n");
      out.write("            if (regexEmail()) { // 정규식 통과해야 중복 검사\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    type: \"post\",\r\n");
      out.write("                    url: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/emailCheckProc.mem\",\r\n");
      out.write("                    data: {\r\n");
      out.write("                        \"email\": email.value\r\n");
      out.write("                    }\r\n");
      out.write("                }).done(function (data) { // 중복이 아니면 String형 false반환\r\n");
      out.write("                    if (data == \"false\") {\r\n");
      out.write("                        alert(\"사용 가능한 이메일입니다. 인증번호를 보냈습니다.\"); // 안내문구 출력\r\n");
      out.write("                        email.readOnly = \"true\"; // 이메일 입력창 잠그기\r\n");
      out.write("                        emailCheck.disabled = \"disabled\"; // 이메일 중복검사 버튼 비활성화\r\n");
      out.write("                        document.getElementById(\"hiddenInput2\").style.display = \"flex\"; // 인증번호 입력창 띄우기\r\n");
      out.write("                        sendEmail(); // 중복검사 통과함과 동시에 인증메일 발송하기\r\n");
      out.write("                    } else {\r\n");
      out.write("                        alert(\"이미 존재하는 이메일입니다. 다시 입력해주세요.\");\r\n");
      out.write("                    }\r\n");
      out.write("                }).fail(function (e) {\r\n");
      out.write("                    console.log(e);\r\n");
      out.write("                });\r\n");
      out.write("            } else {\r\n");
      out.write("                txtRegex_email.innerText = \"이메일을 제대로 입력하세요.\";\r\n");
      out.write("                txtRegex_email.style.color = \"red\";\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 인증메일 발송 \r\n");
      out.write("        function sendEmail() {\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                type: \"post\",\r\n");
      out.write("                url: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/sendEmailProc.mem\",\r\n");
      out.write("                data: {\r\n");
      out.write("                    \"email\": email.value\r\n");
      out.write("                }\r\n");
      out.write("            }).done(function (data) {\r\n");
      out.write("                // console.log(\"email 인증번호 4자리 : \" + data);\r\n");
      out.write("                verification_number2 = data;\r\n");
      out.write("            }).fail(function (e) {\r\n");
      out.write("                console.log(e);\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 4자리 인증번호 입력 후 확인 버튼 클릭시\r\n");
      out.write("        verification_submit2.addEventListener(\"click\", function () {\r\n");
      out.write("            // 인증번호 입력 입력창과 실제 인증번호 같으면\r\n");
      out.write("            if (verification_input2.value == verification_number2) {\r\n");
      out.write("                alert(\"인증번호 일치\");\r\n");
      out.write("                verification_input2.readOnly = \"true\"; // 이메일 입력창 잠금\r\n");
      out.write("                document.getElementById(\"hiddenInput2\").style.display = \"none\"; // 인증번호 입력창 숨기기\r\n");
      out.write("            } else {\r\n");
      out.write("                alert(\"인증번호 불일치\");\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        /***** 휴대전화 영역 *****/\r\n");
      out.write("\r\n");
      out.write("        // 변수 -  휴대전화 관련\r\n");
      out.write("        let phone1 = document.getElementById(\"phone1\") // 번호 첫번째 영역\r\n");
      out.write("        let phone2 = document.getElementById(\"phone2\"); // 번호 중간 영역\r\n");
      out.write("        let phone3 = document.getElementById(\"phone3\"); // 번호 뒷자리 영역\r\n");
      out.write("        let phone_verification = document.getElementById(\"phone_verification\"); // 인증번호 발송 버튼\r\n");
      out.write("        let verification_input = document.getElementById(\"verification_input\"); // 인증번호 입력창(숨어있음)\r\n");
      out.write("        let verification_submit = document.getElementById(\"verification_submit\"); // 인증번호 확인 버튼\r\n");
      out.write("        let phoneNumber = 0; // 휴대번호 11자리 담을 공간\r\n");
      out.write("        let verification_number = 0; // 4자리 인증번호 담을 공간\r\n");
      out.write("\r\n");
      out.write("        // 휴대전화 정규식(통과하면 true, 아니면 false 반환)\r\n");
      out.write("        function regexPhone() {\r\n");
      out.write("            const regexPhone2 = /[0-9]{4,4}/;\r\n");
      out.write("            const regexPhone3 = /[0-9]{4,4}/;\r\n");
      out.write("            // 휴대전화 번호 중간 영역, 마지막 영역 모두 정규식 통과했을 경우\r\n");
      out.write("            if (regexPhone2.test(phone2.value) && regexPhone3.test(phone3.value)) {\r\n");
      out.write("                return true;\r\n");
      out.write("            } else {\r\n");
      out.write("                return false;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 휴대전화 인증 버튼 클릭시\r\n");
      out.write("        phone_verification.addEventListener(\"click\", function () {\r\n");
      out.write("            if (regexPhone()) { // 정규식 통과해야 인증절차 진행\r\n");
      out.write("                // 번호 수정 차단 & 숨은 인증창 띄우기 & 인증번호 발송 알림창 띄우기\r\n");
      out.write("                phone1.disabled = \"false\";\r\n");
      out.write("                phone2.readOnly = \"true\";\r\n");
      out.write("                phone3.readOnly = \"true\";\r\n");
      out.write("                document.getElementById(\"hiddenInput\").style.display = \"flex\";\r\n");
      out.write("                alert(\"인증번호가 발송되었습니다.\");\r\n");
      out.write("                // 휴대전화 번호 서버로 넘겨서 문자발송 처리하기\r\n");
      out.write("                phoneNumber = phone1.value + phone2.value + phone3.value;\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    type: \"post\",\r\n");
      out.write("                    url: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/sendSmsProc.mem\",\r\n");
      out.write("                    data: {\r\n");
      out.write("                        \"phoneNumber\": phoneNumber\r\n");
      out.write("                    }\r\n");
      out.write("                }).done(function (data) {\r\n");
      out.write("                    // 서버에서 생성된 무작위 4자리 인증번호를 변수에 저장\r\n");
      out.write("                    verification_number = data;\r\n");
      out.write("                    phone_verification.disabled = \"disabled\";\r\n");
      out.write("                }).fail(function (e) {\r\n");
      out.write("                    console.log(e);\r\n");
      out.write("                });\r\n");
      out.write("            } else { // 정규식 미통과 경우\r\n");
      out.write("                alert(\"번호를 정확히 입력해주세요.\");\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 4자리 인증번호 입력 후 확인버튼 클릭시\r\n");
      out.write("        verification_submit.addEventListener(\"click\", function () {\r\n");
      out.write("            // console.log(\"verification_input.value : \" + verification_input.value);\r\n");
      out.write("            // console.log(\"verification_number : \" + verification_number);\r\n");
      out.write("\r\n");
      out.write("            // 입력한 번호와, 서버에서 생성한 번호가 일치할 때\r\n");
      out.write("            if (verification_number == verification_input.value) {\r\n");
      out.write("                alert(\"인증번호 일치\"); // 알림창 띄우기\r\n");
      out.write("                verification_input.readOnly = \"true\"; // 인증번호 입력창 잠그기\r\n");
      out.write("                verification_submit.disabled = \"disabled\"; // 인증 발송 버튼 잠그기\r\n");
      out.write("                document.getElementById(\"hiddenInput\").style.display = \"none\"; // 숨기기\r\n");
      out.write("            } else { // 일치하지 않는 경우\r\n");
      out.write("                alert(\"인증번호 불일치\");\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        /***** 그 외 *****/\r\n");
      out.write("\r\n");
      out.write("        // 카카오 유저 회원가입\r\n");
      out.write("        let kakaoLogin = false;\r\n");
      out.write("        let kakao_id = \"\";\r\n");
      out.write("        if (\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userInfo.get('nickname')}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" !== \"\") {\r\n");
      out.write("            kakaoLogin = true;\r\n");
      out.write("            const kakao_nickname = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userInfo.get('nickname')}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("            const kakao_profileImgUrl = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userInfo.get('profile_image_url')}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("            const kakao_email = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userInfo.get('email')}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("            kakao_id = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userInfo.get('id')}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("            nickname.value = kakao_nickname;\r\n");
      out.write("            email.value = kakao_email;\r\n");
      out.write("            input_profileImgUrl.value = kakao_profileImgUrl;\r\n");
      out.write("            $(\"#profileImg\").css({\r\n");
      out.write("                \"background-image\": \"url('\" + kakao_profileImgUrl + \"')\"\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            id.readOnly = \"true\";\r\n");
      out.write("            password1.readOnly = \"true\";\r\n");
      out.write("            password2.readOnly = \"true\";\r\n");
      out.write("            nickname.readOnly = \"true\";\r\n");
      out.write("            idCheck.disabled = \"disabled\";\r\n");
      out.write("            nicknameCheck.disabled = \"disabled\";\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 프로필 사진 영역\r\n");
      out.write("        $(\"#profileImg\").on(\"click\", function () {\r\n");
      out.write("            $(\"#btnUpload\").click();\r\n");
      out.write("        });\r\n");
      out.write("        $(\"#btnUpload\").on(\"change\", function (e) {\r\n");
      out.write("            readImage(e.target);\r\n");
      out.write("        });\r\n");
      out.write("        function readImage(input) {\r\n");
      out.write("            if (input.files && input.files[0]) {\r\n");
      out.write("                const reader = new FileReader();\r\n");
      out.write("                reader.addEventListener(\"load\", function (e) {\r\n");
      out.write("                    $(\"#profileImg\").css({\r\n");
      out.write("                        \"background-image\": \"url('\" + e.target.result + \"')\"\r\n");
      out.write("                    });\r\n");
      out.write("                });\r\n");
      out.write("                reader.readAsDataURL(input.files[0]);\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 완료 버튼 \r\n");
      out.write("        document.getElementById(\"btnSubmit\").addEventListener(\"click\", function () {\r\n");
      out.write("            // 변수 - 주소 관련\r\n");
      out.write("            let postcode = document.getElementById(\"sample4_postcode\"); // 우편번호\r\n");
      out.write("            let roadAddr = document.getElementById(\"sample4_roadAddress\"); // 도로명주소\r\n");
      out.write("            let detailAddr = document.getElementById(\"sample4_detailAddress\"); // 상세주소\r\n");
      out.write("            let extraAddr = document.getElementById(\"sample4_extraAddress\"); // 참고항목\r\n");
      out.write("\r\n");
      out.write("            if (kakaoLogin) {\r\n");
      out.write("                if (email.value == \"\" || !regexEmail()) {\r\n");
      out.write("                    alert(\"이메일을 제대로 입력해주세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                } else if (!regexPhone()) {\r\n");
      out.write("                    alert(\"휴대전화를 제대로 입력해주세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                } else if (!verification_input.readOnly) {\r\n");
      out.write("                    alert(\"휴대전화 인증을 해주세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                } else if (postcode.value == \"\" || roadAddr == \"\") {\r\n");
      out.write("                    alert(\"우편번호 찾기를 진행해주세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                } else {\r\n");
      out.write("                    id.value = kakao_id;\r\n");
      out.write("                    document.getElementById(\"user_phone\").value = phone1.value + phone2.value + phone3.value;\r\n");
      out.write("                    document.getElementById(\"user_address\").value = postcode.value + \" \" + roadAddr.value + \" \" + detailAddr.value + extraAddr.value;\r\n");
      out.write("                    document.getElementById(\"signupForm\").submit();\r\n");
      out.write("                }\r\n");
      out.write("            } else {\r\n");
      out.write("                if (id.value == \"\" || !regexId()) {\r\n");
      out.write("                    alert(\"아이디를 제대로 입력해주세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                } else if (password1.value == \"\" || password2.value == \"\" || !regexPw()) {\r\n");
      out.write("                    alert(\"패스워드를 제대로 입력해주세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                } else if (!regexPhone()) {\r\n");
      out.write("                    alert(\"휴대전화를 제대로 입력해주세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                } else if (nickname.value == \"\" || !regexNickname()) {\r\n");
      out.write("                    alert(\"닉네임을 제대로 입력해주세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                } else if (email.value == \"\" || !regexEmail()) {\r\n");
      out.write("                    alert(\"이메일을 제대로 입력해주세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                } else if (postcode.value == \"\" || roadAddr == \"\") {\r\n");
      out.write("                    alert(\"우편번호 찾기를 진행해주세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                } else if (!id.readOnly) {\r\n");
      out.write("                    alert(\"아이디 중복검사를 해주세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                } else if (!nickname.readOnly) {\r\n");
      out.write("                    alert(\"닉네임 중복검사를 해주세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                } else if (!verification_input.readOnly) {\r\n");
      out.write("                    alert(\"휴대전화 인증을 해주세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                } else {\r\n");
      out.write("                    document.getElementById(\"user_phone\").value = phone1.value + phone2.value + phone3.value;\r\n");
      out.write("                    document.getElementById(\"user_address\").value = postcode.value + \" \" + roadAddr.value + \" \" + detailAddr.value + extraAddr.value;\r\n");
      out.write("                    document.getElementById(\"signupForm\").submit();\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 다음 우편번호 API\r\n");
      out.write("        //본 예제에서는 도로명 주소 표기 방식에 대한 법령에 따라, 내려오는 데이터를 조합하여 올바른 주소를 구성하는 방법을 설명합니다.\r\n");
      out.write("        function sample4_execDaumPostcode() {\r\n");
      out.write("            new daum.Postcode({\r\n");
      out.write("                oncomplete: function (data) {\r\n");
      out.write("                    // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("\r\n");
      out.write("                    // 도로명 주소의 노출 규칙에 따라 주소를 표시한다.\r\n");
      out.write("                    // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("                    var roadAddr = data.roadAddress; // 도로명 주소 변수\r\n");
      out.write("                    var extraRoadAddr = ''; // 참고 항목 변수\r\n");
      out.write("\r\n");
      out.write("                    // 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n");
      out.write("                    // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n");
      out.write("                    if (data.bname !== '' && /[동|로|가]$/g.test(data.bname)) {\r\n");
      out.write("                        extraRoadAddr += data.bname;\r\n");
      out.write("                    }\r\n");
      out.write("                    // 건물명이 있고, 공동주택일 경우 추가한다.\r\n");
      out.write("                    if (data.buildingName !== '' && data.apartment === 'Y') {\r\n");
      out.write("                        extraRoadAddr += (extraRoadAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("                    }\r\n");
      out.write("                    // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n");
      out.write("                    if (extraRoadAddr !== '') {\r\n");
      out.write("                        extraRoadAddr = ' (' + extraRoadAddr + ')';\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("                    document.getElementById('sample4_postcode').value = data.zonecode;\r\n");
      out.write("                    document.getElementById(\"sample4_roadAddress\").value = roadAddr;\r\n");
      out.write("                    document.getElementById(\"sample4_jibunAddress\").value = data.jibunAddress;\r\n");
      out.write("\r\n");
      out.write("                    // 참고항목 문자열이 있을 경우 해당 필드에 넣는다.\r\n");
      out.write("                    if (roadAddr !== '') {\r\n");
      out.write("                        document.getElementById(\"sample4_extraAddress\").value = extraRoadAddr;\r\n");
      out.write("                    } else {\r\n");
      out.write("                        document.getElementById(\"sample4_extraAddress\").value = '';\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    var guideTextBox = document.getElementById(\"guide\");\r\n");
      out.write("                }\r\n");
      out.write("            }).open();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
